# Generated by Django 5.2.6 on 2025-10-11 10:45

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Skills",
            fields=[
                (
                    "skill_id",
                    models.AutoField(
                        db_column="skill_id", primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "Skills",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("user_id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=50)),
                ("birthdate", models.DateField(blank=True, null=True)),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "available_region",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("SEOUL", "수도권"),
                            ("CHUNGCHEONG", "충청권"),
                            ("YEONGNAM", "영남권"),
                            ("HONAM", "호남권"),
                            ("ETC", "기타"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("github_url", models.URLField(blank=True, null=True)),
                ("portfolio_url", models.URLField(blank=True, null=True)),
                (
                    "introduction",
                    models.TextField(blank=True, max_length=150, null=True),
                ),
                (
                    "major",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("CS", "컴퓨터공학"),
                            ("SECURITY", "정보보호"),
                            ("DESIGN", "디자인"),
                            ("BUSINESS", "경영/기타"),
                            ("NON_CS", "비전공자"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("specialty", models.CharField(blank=True, max_length=255, null=True)),
                ("tech_stack", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "collaboration_tools",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "experience_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("NONE", "없음"),
                            ("ONCE", "1회"),
                            ("FEW", "2~3회"),
                            ("MANY", "4회 이상"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "collaboration_style",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("OFFLINE", "오프라인 중심"),
                            ("ONLINE", "온라인 중심"),
                            ("HYBRID", "혼합"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "meeting_frequency",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("WEEKLY_1", "주 1회"),
                            ("WEEKLY_2_3", "주 2~3회"),
                            ("DAILY", "매일 가능"),
                            ("PROJECT_ONLY", "프로젝트 중심만 가능"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "belbin_role",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PL", "PL - 아이디어 뱅크"),
                            ("RI", "RI - 자원탐색자"),
                            ("CO", "CO - 조정자"),
                            ("SH", "SH - 추진자"),
                            ("ME", "ME - 평가자"),
                            ("TW", "TW - 팀 워커"),
                            ("IMP", "IMP - 실행자"),
                            ("CF", "CF - 완성자"),
                            ("SP", "SP - 전문가"),
                        ],
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "preferred_team_size",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("SMALL", "2~3명"),
                            ("MEDIUM", "4~5명"),
                            ("LARGE", "6명 이상도 가능/기타"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "preferred_project_topics",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "availability_period",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("SHORT", "단기: 1달 이내"),
                            ("MEDIUM", "중기: 2~3달"),
                            ("LONG", "장기: 3달 이상/기타"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("is_profile_complete", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "Users",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="Projects",
            fields=[
                (
                    "project_id",
                    models.AutoField(
                        db_column="project_id", primary_key=True, serialize=False
                    ),
                ),
                ("title", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True, null=True)),
                ("goal", models.TextField(blank=True, null=True)),
                ("tech_stack", models.TextField(blank=True, null=True)),
                ("is_open", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "creator",
                    models.ForeignKey(
                        db_column="creator_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "Projects",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="ProjectEmbedding",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("embedding", models.JSONField(blank=True, null=True)),
                (
                    "project",
                    models.OneToOneField(
                        db_column="project_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="embedding_profile",
                        to="teamspace.projects",
                    ),
                ),
            ],
            options={
                "db_table": "ProjectEmbeddings",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="Teams",
            fields=[
                (
                    "team_id",
                    models.AutoField(
                        db_column="team_id", primary_key=True, serialize=False
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "project",
                    models.ForeignKey(
                        db_column="project_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="teamspace.projects",
                    ),
                ),
            ],
            options={
                "db_table": "Teams",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="UserEmbedding",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("embedding", models.JSONField(blank=True, null=True)),
                (
                    "user",
                    models.OneToOneField(
                        db_column="user_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="embedding_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "UserEmbeddings",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="Portfolios",
            fields=[
                (
                    "portfolio_id",
                    models.AutoField(
                        db_column="portfolio_id", primary_key=True, serialize=False
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                ("url", models.URLField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        db_column="user_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        db_column="project_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="teamspace.projects",
                    ),
                ),
            ],
            options={
                "db_table": "Portfolios",
                "managed": True,
                "unique_together": {("user", "project")},
            },
        ),
        migrations.CreateModel(
            name="MatchScores",
            fields=[
                (
                    "match_id",
                    models.AutoField(
                        db_column="match_id", primary_key=True, serialize=False
                    ),
                ),
                ("score", models.FloatField()),
                ("evaluated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        db_column="user_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        db_column="project_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="teamspace.projects",
                    ),
                ),
            ],
            options={
                "db_table": "MatchScores",
                "managed": True,
                "unique_together": {("user", "project")},
            },
        ),
        migrations.CreateModel(
            name="TeamMembers",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("role", models.CharField(max_length=50)),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        db_column="user_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        db_column="team_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="teamspace.teams",
                    ),
                ),
            ],
            options={
                "db_table": "TeamMembers",
                "managed": True,
                "unique_together": {("team", "user")},
            },
        ),
        migrations.CreateModel(
            name="Evaluations",
            fields=[
                (
                    "evaluation_id",
                    models.AutoField(
                        db_column="evaluation_id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "score",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                ("feedback", models.TextField(blank=True, null=True)),
                ("evaluated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "evaluatee",
                    models.ForeignKey(
                        db_column="evaluatee_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_evaluations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "evaluator",
                    models.ForeignKey(
                        db_column="evaluator_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="given_evaluations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        db_column="team_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="teamspace.teams",
                    ),
                ),
            ],
            options={
                "db_table": "Evaluations",
                "managed": True,
                "unique_together": {("evaluator", "evaluatee", "team")},
            },
        ),
        migrations.CreateModel(
            name="UserSkills",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "proficiency_level",
                    models.CharField(
                        choices=[
                            ("Beginner", "Beginner"),
                            ("Intermediate", "Intermediate"),
                            ("Advanced", "Advanced"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "skill",
                    models.ForeignKey(
                        db_column="skill_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="teamspace.skills",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        db_column="user_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "UserSkills",
                "managed": True,
                "unique_together": {("user", "skill")},
            },
        ),
    ]
